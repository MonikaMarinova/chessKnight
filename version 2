#include <QCoreApplication>
#include <iostream>

using namespace std;

#define n 8

void createBoard();
void move(u_int32_t i, u_int32_t j);
void printBoard();
void printBoardIndex();

u_int32_t board[n][n];
u_int32_t cntMoves = 0;

int main()
{
    createBoard();
    printBoardIndex();
    cout << endl;
    move(4,4);
    printBoard();
    cout << cntMoves << endl;


    return 0;
}

void createBoard(){
    for(int i = n; i >= 1; i--)
        for(int j = 1; j <= n; j++)
            board[i][j] = 0;
}



void move(u_int32_t i, u_int32_t j){
   if(i > n || i < 1 || j > n || j < 1){  // set knight at 1b
        i = 1;
        j = 2;
    }


    if(board[i - 1][j + 2] != 0 || board[i + 1][j + 2] != 0 ||
            board[i -1][j - 2] != 0 || board[i +1][j - 2] != 0 ||
            board[i + 2][j - 1] != 0 || board[i + 2][j + 1] != 0 ||
            board[i - 2][j - 1] != 0 || board[i - 1][j + 1] != 0)
       return;

    if((i - 1) < n && (i - 1) >1 && (j + 2) < n && (j + 2) > 1){
         cntMoves++;
         board[i - 1][j + 2] = cntMoves;
         move(i - 1,j + 2);
         return;
    }

    if((i + 1) < n && (i + 1) >1 && (j + 2) < n && (j + 2) > 1){
        cntMoves++;
        board[i + 1][j + 2] = cntMoves;
        move(i + 1,j + 2);
        return;
    }

    if((i - 1) < n && (i - 1) >1 && (j - 2) < n && (j - 2) > 1){
        cntMoves++;
        board[i - 1][j - 2] = cntMoves;
        move(i - 1,j - 2);
        return;
    }

    if((i + 1) < n && (i + 1) >1 && (j - 2) < n && (j - 2) > 1){
        cntMoves++;
        board[i + 1][j - 2] = cntMoves;
        move(i + 1,j - 2);
        return;
    }

    if((i + 2) < n && (i + 2) >1 && (j - 1) < n && (j - 1) > 1){
        cntMoves++;
        board[i + 2][j - 1] = cntMoves;
        move(i + 2,j - 1);
        return;
    }

    if((i + 2) < n && (i + 2) >1 && (j + 1) < n && (j + 1) > 1){
        cntMoves++;
        board[i + 2][j + 1] = cntMoves;
        move(i + 2,j + 1);
        return;
    }

    if((i - 2) < n && (i - 2) >1 && (j - 1) < n && (j - 1) > 1){
        cntMoves++;
        board[i - 2][j - 1] = cntMoves;
        move(i - 2,j - 1);
        return;
    }

    if((i - 2) < n && (i - 2) >1 && (j + 1) < n && (j + 1) > 1){
        cntMoves++;
        board[i - 2][j + 1] = cntMoves;
        move(i - 2,j + 1);
        return;
    }




}

void printBoard(){
    for(int i = n; i >= 1; i--){
        for(int j = 1; j <= n; j++)
           cout << board[i][j] << "|";
        cout << endl;
    }
}

void printBoardIndex(){
    for(int i = n; i >= 1; i--){
        for(int j = 1; j <= n; j++)
           cout << i << j << "|";
        cout << endl;
    }
}

