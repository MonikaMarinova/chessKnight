#include <QCoreApplication>
#include <iostream>

using namespace std;

#define n 8

struct position{
    u_int32_t x, y;
};

void createBoard();
u_int32_t checkPos(u_int32_t x, u_int32_t y);
u_int32_t move(u_int32_t x, u_int32_t y);
void printBoard();
void printBoardIndex();

u_int32_t  availableX[64];
u_int32_t  availableY[64];
u_int32_t  i = 0;
u_int32_t board[n][n];
u_int32_t cntMoves = 0;
u_int32_t possibleMoves = 64;


int main()
{
    createBoard();
    printBoardIndex();
    cout << endl;
    checkPos(4,4);
    printBoard();


    return 0;
}

void createBoard(){
    for(int i = n; i >= 1; i--)
        for(int j = 1; j <= n; j++)
            board[i][j] = 0;
}

u_int32_t checkPos(u_int32_t x, u_int32_t y){
    u_int32_t xVar[] = {x + 1, x - 1, x + 2, x - 2};
    u_int32_t yVar[] = {y + 1, y - 1, y + 2, y - 2};

    for(int c1 = 0; c1 <= 1; c1++)
        for(int c2 = 2; c2 <= 3; c2++){
            if(board[xVar[c1]][yVar[c2]] == 0 && xVar[c1] < n && xVar[c1] > 1 &&
                    xVar[c2] < n && xVar[c2] > 1){
                possibleMoves--;
                availableX[i] = xVar[c1];
                availableY[i] = yVar[c2];
                i++;
             /* cntMoves++;
                move(xVar[c1],yVar[c2]); */
            }
        }

    for(int c1 = 2; c1 <= 3; c1++)
        for(int c2 = 0; c2 <= 1; c2++){
            if(board[xVar[c1]][yVar[c2]] == 0 && xVar[c1] < n && xVar[c1] > 1 &&
                    xVar[c2] < n && xVar[c2] > 1){
                possibleMoves--;
                availableX[i] = xVar[c1];
                availableY[i] = yVar[c2];
                i++;
              /*cntMoves++;
                move(xVar[c1],yVar[c2]);
                */
            }
        }

    for(int i = 0; i < 8; i++){
        cout << availableX[i];
         cout << availableY[i] << '_';
    }
    cout << endl;

    cout << possibleMoves << endl;
   /* for(int i = 0; i < 4; i++)
        cout << yVar[i] << '_';
    cout << endl;
    */



}

u_int32_t move(u_int32_t x, u_int32_t y){
    board[x][y] = cntMoves;
}

void printBoard(){
    for(int i = n; i >= 1; i--){
        for(int j = 1; j <= n; j++)
           cout << board[i][j] << "|";
        cout << endl;
    }
}

void printBoardIndex(){
    for(int i = n; i >= 1; i--){
        for(int j = 1; j <= n; j++)
           cout << i << j << "|";
        cout << endl;
    }
}

/*
u_int32_t move(u_int32_t x, u_int32_t y){
  u_int32_t xVar[] = {x + 1, x - 1, x + 2, x - 2};
  u_int32_t yVar[] = {y + 1, y - 1, y + 2, y - 2};


   if(x > n || x < 1 || y > n || y < 1){  // set knight at 1bl
        x = 1;
        y = 2;
    }


    if(board[x][y] != 0)
       return cntMoves;


    for(int c1 = 0; c1 <= 1; c1++)
        for(int c2 = 2; c2 <= 3; c2++){
            cntMoves++;
            board[xVar[c1]][yVar[c2]] = cntMoves;
     }

    for(int c1 = 2; c1 <= 3; c1++)
        for(int c2 = 0; c2 <= 1; c2++){
            cntMoves++;
            board[xVar[c1]][yVar[c2]] = cntMoves;
     }

}

*/

